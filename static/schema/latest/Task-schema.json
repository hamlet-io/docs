{
  "$id": "https://docs.hamlet.io/schema/latest/Task-schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {
    "aws_ec2_select_instance": {
      "additionalProperties": false,
      "description": "Lists the available instances and allows the user to select one - returns the selected instance id",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        },
        "Tags": {
          "description": "An object of Key=Value tags that the instances must have",
          "type": "object"
        },
        "VpcId": {
          "description": "The VPCId that instances are assiged to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "aws_ecr_docker_login": {
      "additionalProperties": false,
      "description": "Perfom a docker login using credentials from AWS ECR",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        },
        "RegistryId": {
          "description": "The Registry Id ( AWS Account Id) to login into",
          "type": "string"
        }
      },
      "type": "object"
    },
    "aws_ecs_run_command": {
      "additionalProperties": false,
      "description": "Runs an interactive task on a provided task arn",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "ClusterArn": {
          "description": "The ARN of the ECS Cluster to list running tasks from",
          "type": "string"
        },
        "Command": {
          "description": "The command to run in the command",
          "type": "string"
        },
        "ContainerName": {
          "description": "The name of the container in the task definition",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        },
        "TaskArn": {
          "description": "The Arn or Name of a running task to run the command on",
          "type": "string"
        }
      },
      "required": [
        "ClusterArn",
        "TaskArn"
      ],
      "type": "object"
    },
    "aws_ecs_run_task": {
      "additionalProperties": false,
      "description": "Run an ecs task with provided overrided and wait for it to run or to run and stop",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "CapacityProvider": {
          "description": "The capacity provider used to host the task",
          "type": "string"
        },
        "ClusterArn": {
          "description": "The ARN of the ECS Cluster to list running tasks from",
          "type": "string"
        },
        "CommandOverride": {
          "description": "A json escaped string array or string with an override of the container command",
          "type": "string"
        },
        "ContainerName": {
          "description": "The name of the container to apply overrrides and watch for exit status",
          "type": "string"
        },
        "EnvironmentOverrides": {
          "description": "A json escaped object string or string with overrides for environment variables",
          "type": "string"
        },
        "PublicIP": {
          "default": false,
          "description": "Assign a public IP address to the task",
          "enum": [
            "true",
            "false"
          ],
          "type": [
            "boolean",
            "string"
          ]
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        },
        "SecurityGroupIds": {
          "description": "A comma seperated list of security group ids to apply to task interfaces",
          "type": "string"
        },
        "SubnetIds": {
          "description": "A comma seperated list of subnetIds the task can be hosted in",
          "type": "string"
        },
        "TaskFamily": {
          "description": "The name of a Task definition family that to show tasks for",
          "type": "string"
        }
      },
      "required": [
        "ClusterArn",
        "TaskFamily",
        "ContainerName"
      ],
      "type": "object"
    },
    "aws_ecs_select_task": {
      "additionalProperties": false,
      "description": "List the running tasks for a service or task family and return the user selected task",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "ClusterArn": {
          "description": "The ARN of the ECS Cluster to list running tasks from",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        },
        "ServiceName": {
          "description": "The Arn or Name of a service deployed to the cluster",
          "type": "string"
        },
        "TaskFamily": {
          "description": "The name of a Task definition family that to show tasks for",
          "type": "string"
        }
      },
      "required": [
        "ClusterArn"
      ],
      "type": "object"
    },
    "aws_kms_decrypt_ciphertext": {
      "additionalProperties": false,
      "description": "Given an encrypted KMS ciphertext object decrypt it and return the plaintext result as a string",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "Ciphertext": {
          "description": "The ciphertext value",
          "type": "string"
        },
        "EncryptionScheme": {
          "description": "A scheme prefix to show that the value is encrypted",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        }
      },
      "required": [
        "Ciphertext"
      ],
      "type": "object"
    },
    "aws_kms_encrypt_value": {
      "additionalProperties": false,
      "description": "Given a value return the a base64 encoded string of the KMS Symetric encrypted ciphertext",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "EncryptionScheme": {
          "description": "A scheme style prefix to add to the base64 encoded value",
          "type": "string"
        },
        "KeyArn": {
          "description": "The Arn of the kms key or alias to encrypt the value with",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        },
        "Value": {
          "description": "The value that needs to be encrypted",
          "type": "string"
        }
      },
      "required": [
        "KeyArn",
        "Value"
      ],
      "type": "object"
    },
    "aws_lambda_invoke_function": {
      "additionalProperties": false,
      "description": "Invoke a lambda function with a payload and return the returned payload",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "FunctionArn": {
          "description": "The ARN of the lambda function",
          "type": "string"
        },
        "Payload": {
          "description": "A json encoded string with the lambda payload",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        }
      },
      "type": "object"
    },
    "aws_rds_create_snapshot": {
      "additionalProperties": false,
      "description": "Create an rds native snapshot for either an instance or cluster, wait for it to become available and then return the arn",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "Cluster": {
          "description": "If the database is a cluster or instance",
          "type": [
            "string",
            "boolean"
          ]
        },
        "DbId": {
          "description": "The Arn or Id of the rds instance or cluster",
          "type": "string"
        },
        "IncludeDateSuffix": {
          "default": true,
          "description": "Include a date based suffix in the snapshot name",
          "type": [
            "string",
            "boolean"
          ]
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        },
        "SnapshotName": {
          "description": "The name of the snapshot",
          "type": "string"
        }
      },
      "required": [
        "DbId",
        "Cluster",
        "SnapshotName"
      ],
      "type": "object"
    },
    "aws_s3_download_bucket": {
      "additionalProperties": false,
      "description": "Download the contents of an S3 bucket to a local directory",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "BucketName": {
          "description": "The name of the S3 Bucket",
          "type": "string"
        },
        "LocalPath": {
          "description": "A local directory path to store the objects in",
          "type": "string"
        },
        "Prefix": {
          "description": "A prefix required for all items to download",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        }
      },
      "required": [
        "BucketName",
        "LocalPath"
      ],
      "type": "object"
    },
    "aws_s3_download_object": {
      "additionalProperties": false,
      "description": "Download a file from an S3 bucket to a local path",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "BucketName": {
          "description": "The name of the S3 Bucket",
          "type": "string"
        },
        "LocalPath": {
          "description": "The local path to download the object to",
          "type": "string"
        },
        "Object": {
          "description": "The path of the object in the bucket",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        }
      },
      "required": [
        "BucketName",
        "Object",
        "LocalPath"
      ],
      "type": "object"
    },
    "aws_s3_empty_bucket": {
      "additionalProperties": false,
      "description": "Delete all versions of objects in an S3 Bucket",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "BucketName": {
          "description": "The name of the S3 Bucket",
          "type": "string"
        },
        "Prefix": {
          "description": "A prefix required for all items to download",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        }
      },
      "required": [
        "BucketName"
      ],
      "type": "object"
    },
    "aws_s3_upload_object": {
      "additionalProperties": false,
      "description": "Upload a file to an S3 bucket",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "BucketName": {
          "description": "The name of the S3 Bucket",
          "type": "string"
        },
        "LocalPath": {
          "description": "The local path to the object to upload",
          "type": "string"
        },
        "Object": {
          "description": "The path of the object in the bucket",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        }
      },
      "required": [
        "BucketName",
        "Object",
        "LocalPath"
      ],
      "type": "object"
    },
    "aws_secretsmanager_get_secret_value": {
      "additionalProperties": false,
      "description": "Get the value of a secret stored in secrets manager",
      "properties": {
        "AWSAccessKeyId": {
          "description": "The AWS Access Key Id with access to decrypt",
          "type": "string"
        },
        "AWSSecretAccessKey": {
          "description": "The AWS Secret Access Key with access to decrypt",
          "type": "string"
        },
        "AWSSessionToken": {
          "description": "The AWS Session Token with access to decrypt",
          "type": "string"
        },
        "JSONKeyPath": {
          "description": "A path to the key as JMES path for the value",
          "type": "string"
        },
        "Region": {
          "description": "The name of the region to use for the aws session",
          "type": "string"
        },
        "SecretArn": {
          "description": "The name of the S3 Bucket",
          "type": "string"
        }
      },
      "required": [
        "SecretArn"
      ],
      "type": "object"
    },
    "aws_ses_smtp_password": {
      "additionalProperties": false,
      "description": "Generate a Sig4 based SMTP credential that is used to authenciate with ses via SMTP",
      "properties": {
        "AWSSecretAccessKey": {
          "description": "The secret key of the access key pair that will be used to send emails via SMTP",
          "type": "string"
        },
        "SESRegion": {
          "description": "The name of the region that the SMTP endpoint will be used",
          "type": "string"
        }
      },
      "required": [
        "SESRegion",
        "AWSSecretAccessKey"
      ],
      "type": "object"
    },
    "bash_run_command": {
      "additionalProperties": false,
      "description": "Run a bash command locally and use the stdout as the returned result",
      "properties": {
        "Command": {
          "description": "The command to run",
          "type": "string"
        }
      },
      "required": [
        "Command"
      ],
      "type": "object"
    },
    "cmdb_write_stack_output": {
      "additionalProperties": false,
      "description": "Write a stack output as part of a runbook",
      "properties": {
        "Account": {
          "description": "The Name of the account layer",
          "type": "string"
        },
        "DeploymentGroup": {
          "description": "The deployment group the stack belongs to",
          "type": "string"
        },
        "DeploymentUnit": {
          "description": "The deployment unit the stack belongs to",
          "type": "string"
        },
        "DistrictType": {
          "description": "The type of district used in the deployment",
          "type": "string"
        },
        "Environment": {
          "description": "The Name of the environment layer",
          "type": "string"
        },
        "GenerationFramework": {
          "description": "The framework to use for generating the template",
          "type": "string"
        },
        "GenerationInputSource": {
          "description": "The input source used for te engine",
          "type": "string"
        },
        "GenerationProviders": {
          "description": "A list of generation providers used for the engine",
          "type": "string"
        },
        "Product": {
          "description": "The Name of the product layer",
          "type": "string"
        },
        "RootDir": {
          "description": "The CMDB root directory path",
          "type": "string"
        },
        "Segment": {
          "description": "The Name of the segment layer",
          "type": "string"
        },
        "StackOutputContent": {
          "description": "The key value parirs to write to the file as a JSON escaped string",
          "type": "string"
        },
        "Tenant": {
          "description": "The Name of the tenant layer",
          "type": "string"
        }
      },
      "required": [
        "StackOutputContent",
        "DeploymentUnit",
        "DeploymentGroup",
        "GenerationFramework",
        "GenerationProviders",
        "GenerationInputSource",
        "RootDir",
        "DistrictType"
      ],
      "type": "object"
    },
    "conditional_stage_skip": {
      "additionalProperties": false,
      "description": "If a condition doesn't match skip the rest of the steps in the stage",
      "properties": {
        "Condition": {
          "description": "How to test the value",
          "enum": [
            "Equals",
            "StartsWith",
            "EndsWith",
            "Contains",
            "NotEquals"
          ],
          "type": "string"
        },
        "Test": {
          "description": "The value compared to",
          "type": "string"
        },
        "Value": {
          "description": "The value to test the match on",
          "type": "string"
        }
      },
      "required": [
        "Test",
        "Condition",
        "Value"
      ],
      "type": "object"
    },
    "create_schema": {
      "additionalProperties": false,
      "description": "Create a JSONSchema for a give schema set",
      "properties": {
        "Schema": {
          "description": "The schema to generate",
          "type": "string"
        }
      },
      "required": [
        "Schema"
      ],
      "type": "object"
    },
    "docker_pull_image": {
      "additionalProperties": false,
      "description": "Perfom a docker login using credentials from AWS ECR",
      "properties": {
        "Image": {
          "description": "The image to pull from a registry",
          "type": "string"
        }
      },
      "required": [
        "Image"
      ],
      "type": "object"
    },
    "docker_push_image": {
      "additionalProperties": false,
      "description": "Perfom a docker login using credentials from AWS ECR",
      "properties": {
        "DestinationImage": {
          "description": "The destination image name",
          "type": "string"
        },
        "SourceImage": {
          "description": "The local image to push to the destination",
          "type": "string"
        }
      },
      "required": [
        "DestinationImage",
        "SourceImage"
      ],
      "type": "object"
    },
    "file_read_content": {
      "additionalProperties": false,
      "description": "Read the contents of a file and provide the content as a result output",
      "properties": {
        "FilePath": {
          "description": "The path to the file",
          "type": "string"
        }
      },
      "required": [
        "FilePath"
      ],
      "type": "object"
    },
    "file_zip_path": {
      "additionalProperties": false,
      "description": "Crate a zip based archive of a source path and save it to the destination path. If already a zip then copy to destination",
      "properties": {
        "DestinationPath": {
          "description": "The path to output the zip to",
          "type": "string"
        },
        "SourcePath": {
          "description": "The path to the directory to zip or an existing zip",
          "type": "string"
        }
      },
      "required": [
        "SourcePath",
        "DestinationPath"
      ],
      "type": "object"
    },
    "install_plugin": {
      "additionalProperties": false,
      "description": "Install a hamlet plugin from the source provided",
      "properties": {
        "Enabled": {
          "default": true,
          "description": "To enable loading the plugin",
          "type": "boolean"
        },
        "Name": {
          "description": "The id of the plugin to install",
          "type": "string"
        },
        "Priority": {
          "default": 100,
          "description": "The priority order to load plugins - lowest first",
          "type": "number"
        },
        "Required": {
          "default": false,
          "description": "Ensure the plugin loads at all times",
          "type": "boolean"
        },
        "Source": {
          "description": "Where the plugin for the plugin can be found",
          "enum": [
            "local",
            "git"
          ],
          "type": "string"
        },
        "Source:git": {
          "additionalProperties": false,
          "properties": {
            "Path": {
              "description": "a path within in the repository where the plugin starts",
              "type": "string"
            },
            "Ref": {
              "default": "main",
              "description": "The ref to clone from the repo",
              "type": "string"
            },
            "Url": {
              "description": "The Url for the git repository",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "Name",
        "Source"
      ],
      "type": "object"
    },
    "manage_deployment": {
      "additionalProperties": false,
      "description": "Generate a list of deployment units and groups that can be used to manage a segment",
      "properties": {
        "CurrentState": {
          "description": "The current state of the deployment",
          "enum": [
            "notdeployed",
            "deployed",
            "orphaned"
          ],
          "type": "string"
        },
        "DeploymentGroup": {
          "type": "string"
        },
        "DeploymentProvider": {
          "type": "string"
        },
        "DeploymentUnit": {
          "type": "string"
        },
        "Operations": {
          "contains": {
            "type": [
              "string"
            ]
          },
          "type": "array"
        }
      },
      "required": [
        "DeploymentUnit",
        "DeploymentGroup",
        "Operations",
        "DeploymentProvider",
        "CurrentState"
      ],
      "type": "object"
    },
    "output_echo": {
      "additionalProperties": false,
      "description": "Echo the provided value to stdout or stderr",
      "properties": {
        "Format": {
          "default": "string",
          "description": "The format of the data to output - pretty prints if possible",
          "enum": [
            "string",
            "json"
          ],
          "type": "string"
        },
        "OutputStream": {
          "default": "stdout",
          "description": "The stream to output the value to",
          "enum": [
            "stdout",
            "stderr"
          ],
          "type": "string"
        },
        "Value": {
          "description": "The value to echo",
          "type": "string"
        }
      },
      "required": [
        "Value"
      ],
      "type": "object"
    },
    "process_template_pass": {
      "additionalProperties": false,
      "description": "Execute the codeontap freemarker engine to create an occurrence template file for subset",
      "properties": {
        "deploymentUnitSubset": {
          "type": "string"
        },
        "outputConversion": {
          "type": "string"
        },
        "outputFileName": {
          "type": "string"
        },
        "outputFormat": {
          "type": "string"
        },
        "outputType": {
          "type": "string"
        },
        "pass": {
          "type": "string"
        },
        "passAlternative": {
          "type": "string"
        }
      },
      "required": [
        "outputType",
        "outputFormat",
        "outputConversion",
        "pass",
        "passAlternative",
        "outputFileName",
        "deploymentUnitSubset"
      ],
      "type": "object"
    },
    "rename_file": {
      "additionalProperties": false,
      "description": "Renames a file to a new value within the same directory",
      "properties": {
        "currentFileName": {
          "type": "string"
        },
        "newFileName": {
          "type": "string"
        }
      },
      "required": [
        "currentFileName",
        "newFileName"
      ],
      "type": "object"
    },
    "run_bash_script": {
      "additionalProperties": false,
      "description": "Execute a shell script",
      "properties": {
        "scriptFileName": {
          "description": "The name of the script to run",
          "type": "string"
        },
        "source": {
          "default": true,
          "description": "Source the script when executing it as part of the executor process",
          "type": "boolean"
        }
      },
      "required": [
        "scriptFileName"
      ],
      "type": "object"
    },
    "set_provider_credentials": {
      "additionalProperties": false,
      "description": "Use the hamlet context to define the credentials for cloud providers",
      "properties": {
        "AccountId": {
          "description": "The hamlet Account Id for the provider login",
          "type": "string"
        },
        "Provider": {
          "description": "The name of the provider the account is defined for",
          "type": "string"
        },
        "ProviderId": {
          "description": "The Id that represents the account with the provider",
          "type": "string"
        }
      },
      "required": [
        "AccountId",
        "Provider",
        "ProviderId"
      ],
      "type": "object"
    },
    "ssh_copy_file": {
      "additionalProperties": false,
      "description": "Copy a file between the local host and a remote ssh host",
      "properties": {
        "BastionHost": {
          "description": "The IP or Hostname of the bastion host",
          "type": "string"
        },
        "BastionPassword": {
          "description": "The password for the username on the bastion host",
          "type": "string"
        },
        "BastionPort": {
          "default": 22,
          "description": "The port number the bastion host is listening on for ssh connections",
          "type": "number"
        },
        "BastionSSHKey": {
          "description": "The path or content of an ssh private key to use for authentication",
          "type": "string"
        },
        "BastionUsername": {
          "description": "The username on the bastion host",
          "type": "string"
        },
        "Direction": {
          "description": "The direction to copy the file",
          "enum": [
            "RemoteToLocal",
            "LocalToRemote"
          ],
          "type": [
            "array",
            "boolean",
            "number",
            "object",
            "string"
          ]
        },
        "Host": {
          "description": "The IP or Hostname of the remote host",
          "type": "string"
        },
        "LocalPath": {
          "description": "The path to the local file",
          "type": "string"
        },
        "Password": {
          "description": "The password for the username on the remote host",
          "type": "string"
        },
        "Port": {
          "default": 22,
          "description": "The port number the host is listening on for ssh connections",
          "type": "number"
        },
        "RemotePath": {
          "description": "The path to the remote file",
          "type": "string"
        },
        "SSHKey": {
          "description": "The path or content of an ssh private key to use for authentication",
          "type": "string"
        },
        "Username": {
          "description": "The username on the remote host",
          "type": "string"
        }
      },
      "required": [
        "Host",
        "Username",
        "Direction",
        "LocalPath",
        "RemotePath"
      ],
      "type": "object"
    },
    "ssh_run_command": {
      "additionalProperties": false,
      "description": "Run an ssh command with an interactive shell",
      "properties": {
        "BastionHost": {
          "description": "The IP or Hostname of the bastion host",
          "type": "string"
        },
        "BastionPassword": {
          "description": "The password for the username on the bastion host",
          "type": "string"
        },
        "BastionPort": {
          "default": 22,
          "description": "The port number the bastion host is listening on for ssh connections",
          "type": "number"
        },
        "BastionSSHKey": {
          "description": "The path or content of an ssh private key to use for authentication",
          "type": "string"
        },
        "BastionUsername": {
          "description": "The username on the bastion host",
          "type": "string"
        },
        "Command": {
          "description": "The command to execute",
          "type": "string"
        },
        "Host": {
          "description": "The IP or Hostname of the remote host",
          "type": "string"
        },
        "Password": {
          "description": "The password for the username on the remote host",
          "type": "string"
        },
        "Port": {
          "default": 22,
          "description": "The port number the host is listening on for ssh connections",
          "type": "number"
        },
        "SSHKey": {
          "description": "The path or content of an ssh private key to use for authentication",
          "type": "string"
        },
        "Username": {
          "description": "The username on the remote host",
          "type": "string"
        }
      },
      "required": [
        "Host",
        "Username",
        "Command"
      ],
      "type": "object"
    }
  }
}
